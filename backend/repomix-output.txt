This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-22T21:44:31.226Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
application/pom.xml
application/src/main/java/cesar/school/raycharge/application/authentication/user/package-info.java
core/pom.xml
docker/pom.xml
docker/src/main/java/cesar/school/raycharge/Application.java
docker/src/main/resources/application.properties
docker/target/classes/application.properties
domain/authentication-bdd/pom.xml
domain/authentication-bdd/src/test/java/cesar/school/raycharge/authentication/domain/AuthenticationUseCase.java
domain/authentication-bdd/src/test/java/cesar/school/raycharge/authentication/domain/package-info.java
domain/authentication-bdd/src/test/java/cesar/school/raycharge/authentication/domain/RunCucumberTest.java
domain/authentication-bdd/src/test/java/cesar/school/raycharge/authentication/domain/security/FakePasswordHasher.java
domain/authentication-bdd/src/test/java/cesar/school/raycharge/authentication/domain/user/CreateAccountUseCase.java
domain/authentication-bdd/src/test/java/cesar/school/raycharge/authentication/domain/user/LoginUseCase.java
domain/authentication-bdd/src/test/java/cesar/school/raycharge/authentication/domain/user/package-info.java
domain/authentication-bdd/src/test/resources/cesar/school/raycharge/authentication/domain/user/create_user.feature
domain/authentication-bdd/src/test/resources/cesar/school/raycharge/authentication/domain/user/login.feature
domain/authentication-bdd/src/test/resources/junit-platform.properties
domain/authentication-bdd/target/test-classes/cesar/school/raycharge/authentication/domain/user/create_user.feature
domain/authentication-bdd/target/test-classes/cesar/school/raycharge/authentication/domain/user/login.feature
domain/authentication-bdd/target/test-classes/junit-platform.properties
domain/authentication/pom.xml
domain/authentication/src/main/java/cesar/school/raycharge/authentication/domain/security/PasswordHasher.java
domain/authentication/src/main/java/cesar/school/raycharge/authentication/domain/user/AuthenticationService.java
domain/authentication/src/main/java/cesar/school/raycharge/authentication/domain/user/package-info.java
domain/authentication/src/main/java/cesar/school/raycharge/authentication/domain/user/User.java
domain/authentication/src/main/java/cesar/school/raycharge/authentication/domain/user/UserId.java
domain/authentication/src/main/java/cesar/school/raycharge/authentication/domain/user/UserRepository.java
domain/authentication/src/main/java/cesar/school/raycharge/authentication/domain/user/UserRole.java
domain/common/pom.xml
domain/pom.xml
infra/persistence/jpa/pom.xml
infra/persistence/jpa/src/main/java/cesar.school.raycharge.infra.persistence.jpa.JpaMapper.java
infra/persistence/jpa/src/main/java/cesar.school.raycharge.infra.persistence.jpa.UserJpa.java
infra/persistence/jpa/src/main/java/cesar.school.raycharge.infra.persistence.jpa.UserRepositoryImpl.java
infra/persistence/jpa/src/main/resources/db/migration/V1__users.sql
infra/persistence/jpa/target/classes/db/migration/V1__users.sql
infra/persistence/memory/pom.xml
infra/persistence/memory/src/main/java/cesar/school/raycharge/infra/persistence/memory/package-info.java
infra/persistence/memory/src/main/java/cesar/school/raycharge/infra/persistence/memory/Repository.java
infra/persistence/pom.xml
infra/pom.xml
infra/security/pom.xml
infra/security/src/main/java/cesar/school/raycharge/infra/security/PasswordHasherImpl.java
pom.xml
presentation/backend/pom.xml
presentation/backend/src/main/java/cesar/school/raycharge/presentation/authentication/AuthenticationController.java
presentation/backend/src/main/java/cesar/school/raycharge/presentation/authentication/AuthenticationForm.java
presentation/backend/src/main/java/cesar/school/raycharge/presentation/BackendMapper.java
presentation/pom.xml

================================================================
Repository Files
================================================================

================
File: application/pom.xml
================
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
         https://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>cesar.school.raycharge</groupId>
        <artifactId>raycharge-core</artifactId>
        <version>0.0.1-SNAPSHOT</version>
        <relativePath>../core/pom.xml</relativePath>
    </parent>

    <artifactId>raycharge-application</artifactId>

    <dependencies>

        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>raycharge-domain-authentication</artifactId>
            <version>${project.version}</version>
        </dependency>

    </dependencies>

</project>

================
File: application/src/main/java/cesar/school/raycharge/application/authentication/user/package-info.java
================
@ApplicationLayer
package cesar.school.raycharge.application.authentication.user;

import org.jmolecules.architecture.layered.ApplicationLayer;

================
File: core/pom.xml
================
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.3.4</version>
        <relativePath/>
    </parent>

    <groupId>cesar.school.raycharge</groupId>
    <artifactId>raycharge-core</artifactId>
    <version>0.0.1-SNAPSHOT</version>

    <packaging>pom</packaging>

    <build>
        <plugins>
            <plugin>
                <executions>
                    <execution>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>graph</goal>
                        </goals>
                    </execution>
                </executions>
                <groupId>com.github.ferstl</groupId>
                <artifactId>depgraph-maven-plugin</artifactId>
                <version>4.0.3</version>
                <configuration>
                    <graphFormat>puml</graphFormat>
                    <showDuplicates>true</showDuplicates>
                    <includes>
                        <include>cesar.school.raycharge.*</include>
                    </includes>
                </configuration>
            </plugin>
        </plugins>

        <pluginManagement>
            <plugins>
                <!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.-->
                <plugin>
                    <groupId>org.eclipse.m2e</groupId>
                    <artifactId>lifecycle-mapping</artifactId>
                    <version>1.0.0</version>
                    <configuration>
                        <lifecycleMappingMetadata>
                            <pluginExecutions>
                                <pluginExecution>
                                    <pluginExecutionFilter>
                                        <groupId>
                                            com.github.ferstl
                                        </groupId>
                                        <artifactId>
                                            depgraph-maven-plugin
                                        </artifactId>
                                        <versionRange>
                                            [4.0.3,)
                                        </versionRange>
                                        <goals>
                                            <goal>graph</goal>
                                        </goals>
                                    </pluginExecutionFilter>
                                    <action>
                                        <ignore/>
                                    </action>
                                </pluginExecution>
                            </pluginExecutions>
                        </lifecycleMappingMetadata>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>commons-validator</groupId>
                <artifactId>commons-validator</artifactId>
                <version>1.9.0</version>
            </dependency>

            <dependency>
                <groupId>org.jmolecules</groupId>
                <artifactId>jmolecules-ddd</artifactId>
                <version>1.9.0</version>
            </dependency>

            <dependency>
                <groupId>org.jmolecules</groupId>
                <artifactId>jmolecules-events</artifactId>
                <version>1.9.0</version>
            </dependency>

            <dependency>
                <groupId>org.jmolecules</groupId>
                <artifactId>jmolecules-layered-architecture</artifactId>
                <version>1.9.0</version>
            </dependency>

            <dependency>
                <groupId>org.modelmapper</groupId>
                <artifactId>modelmapper</artifactId>
                <version>3.2.1</version>
            </dependency>
        </dependencies>
    </dependencyManagement>
</project>

================
File: docker/pom.xml
================
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
         https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>cesar.school.raycharge</groupId>
        <artifactId>raycharge-core</artifactId>
        <version>0.0.1-SNAPSHOT</version>
        <relativePath>../core</relativePath>
    </parent>

    <artifactId>raycharge-docker</artifactId>

    <dependencies>
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
            <version>2.6.0</version>
        </dependency>

        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>raycharge-presentation-backend</artifactId>
            <version>0.0.1-SNAPSHOT</version>
        </dependency>

        <dependency>
            <groupId>cesar.school.raycharge</groupId>
            <artifactId>raycharge-infra-persistence-jpa</artifactId>
            <version>0.0.1-SNAPSHOT</version>
        </dependency>

        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>raycharge-infra-security</artifactId>
            <version>0.0.1-SNAPSHOT</version>
        </dependency>

<!--        <dependency>-->
<!--            <groupId>${project.groupId}</groupId>-->
<!--            <artifactId>raycharge-infra-event</artifactId>-->
<!--            <version>0.0.1-SNAPSHOT</version>-->
<!--        </dependency>-->

        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
    </dependencies>
</project>

================
File: docker/src/main/java/cesar/school/raycharge/Application.java
================
package cesar.school.raycharge;

import cesar.school.raycharge.authentication.domain.security.PasswordHasher;
import cesar.school.raycharge.authentication.domain.user.AuthenticationService;
import cesar.school.raycharge.authentication.domain.user.UserRepository;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;

import java.io.IOException;

@SpringBootApplication
public class Application {
    @Bean
    public AuthenticationService authenticationService(UserRepository userRepository, PasswordHasher hasher) {
        return new AuthenticationService(userRepository, hasher);
    }
    public static void main(String[] args) throws IOException {
        SpringApplication.run(Application.class, args);
    }
}

================
File: docker/src/main/resources/application.properties
================
spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=schema.sql

spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

spring.datasource.url=jdbc:h2:mem:mydb
spring.datasource.username=admin
spring.datasource.password=password
spring.datasource.driverClassName=org.h2.Driver
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

spring.h2.console.enabled=true

================
File: docker/target/classes/application.properties
================
spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=schema.sql

spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

spring.datasource.url=jdbc:h2:mem:mydb
spring.datasource.username=admin
spring.datasource.password=password
spring.datasource.driverClassName=org.h2.Driver
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

spring.h2.console.enabled=true

================
File: domain/authentication-bdd/pom.xml
================
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>cesar.school.raycharge</groupId>
        <artifactId>raycharge-core</artifactId>
        <version>0.0.1-SNAPSHOT</version>
        <relativePath>../../core/pom.xml</relativePath>
    </parent>

    <artifactId>raycharge-domain-authentication-bdd</artifactId>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>io.cucumber</groupId>
                <artifactId>cucumber-bom</artifactId>
                <version> 7.19.0</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-java</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-junit-platform-engine</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.junit.platform</groupId>
            <artifactId>junit-platform-suite</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>raycharge-infra-persistence-memory</artifactId>
            <version>${project.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

</project>

================
File: domain/authentication-bdd/src/test/java/cesar/school/raycharge/authentication/domain/AuthenticationUseCase.java
================
package cesar.school.raycharge.authentication.domain;

import cesar.school.raycharge.authentication.domain.security.FakePasswordHasher;
import cesar.school.raycharge.authentication.domain.security.PasswordHasher;
import cesar.school.raycharge.authentication.domain.user.AuthenticationService;
import cesar.school.raycharge.authentication.domain.user.UserRepository;
import cesar.school.raycharge.infra.persistence.memory.Repository;

public class AuthenticationUseCase {
    protected AuthenticationService authenticationService;

    public AuthenticationUseCase() {
        UserRepository userRepository = new Repository();
        PasswordHasher passwordHasher = new FakePasswordHasher();
        authenticationService = new AuthenticationService(userRepository, passwordHasher);
    }
}

================
File: domain/authentication-bdd/src/test/java/cesar/school/raycharge/authentication/domain/package-info.java
================
package cesar.school.raycharge.authentication.domain;

================
File: domain/authentication-bdd/src/test/java/cesar/school/raycharge/authentication/domain/RunCucumberTest.java
================
package cesar.school.raycharge.authentication.domain;

import org.junit.platform.suite.api.ConfigurationParameter;
import org.junit.platform.suite.api.IncludeEngines;
import org.junit.platform.suite.api.SelectPackages;
import org.junit.platform.suite.api.Suite;

import static io.cucumber.core.options.Constants.PLUGIN_PROPERTY_NAME;

@Suite
@IncludeEngines("cucumber")
@SelectPackages("cesar.school.raycharge.authentication.domain")
@ConfigurationParameter(key = PLUGIN_PROPERTY_NAME, value = "pretty")
public class RunCucumberTest {
}

================
File: domain/authentication-bdd/src/test/java/cesar/school/raycharge/authentication/domain/security/FakePasswordHasher.java
================
package cesar.school.raycharge.authentication.domain.security;

public class FakePasswordHasher implements PasswordHasher{
    @Override
    public String hashPassword(String password) {
        return password.concat("-hashed");
    }

    @Override
    public boolean verifyPassword(String plainPassword, String hashedPassword) {
        String hashedPlainPassword = hashPassword(plainPassword);
        return hashedPlainPassword.equals(hashedPassword);
    }
}

================
File: domain/authentication-bdd/src/test/java/cesar/school/raycharge/authentication/domain/user/CreateAccountUseCase.java
================
package cesar.school.raycharge.authentication.domain.user;

import cesar.school.raycharge.authentication.domain.AuthenticationUseCase;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;

public class CreateAccountUseCase extends AuthenticationUseCase {
    User user;
    User createdUser;
    User existingUser;

    @Given("a user with login {string}, password {string}, and role {string}")
    public void a_user_with_login_password_and_role(String login, String password, String role) {
        UserRole userRole = UserRole.valueOf(role);
        user = new User(login, password, userRole);
    }

    @When("I create the user")
    public void i_create_the_user() {
        createdUser = authenticationService.createUser(user);
    }

    @Then("the user should be saved successfully")
    public void the_user_should_be_saved_successfully() {
        assert createdUser != null;
    }

    @Then("the user should have a hashed password")
    public void the_user_should_have_a_hashed_password() {
        assert createdUser.getPassword() != null;
        assert createdUser.getPassword().endsWith("-hashed");
    }

    @Then("a user already exists with login {string}")
    public void a_user_already_exists_with_login(String login) {
        existingUser = new User(login, "password", UserRole.DRIVER);
        existingUser = authenticationService.createUser(existingUser);
        assert existingUser != null;
    }

    @Then("the user creation should fail")
    public void the_user_creation_should_fail() {
        assert createdUser == null;
    }

}

================
File: domain/authentication-bdd/src/test/java/cesar/school/raycharge/authentication/domain/user/LoginUseCase.java
================
package cesar.school.raycharge.authentication.domain.user;

import cesar.school.raycharge.authentication.domain.AuthenticationUseCase;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;

public class LoginUseCase extends AuthenticationUseCase {
    User existingUser;
    boolean loginResult;

    @Given("a user with login {string} and password {string}")
    public void a_user_with_login_and_password(String login, String password) {
        existingUser = new User(login, password, UserRole.DRIVER);
        authenticationService.createUser(existingUser);
    }

    @When("the user logs in with login {string} and password {string}")
    public void when_the_user_logs_in_with_login_and_password(String login, String password) {
        loginResult = authenticationService.login(login, password);
    }

    @Then("the user is logged in")
    public void the_user_is_logged_in() {
        assert loginResult;
    }

    @Then("the user is not logged in")
    public void the_user_is_not_logged_in() {
        assert !loginResult;
    }
}

================
File: domain/authentication-bdd/src/test/java/cesar/school/raycharge/authentication/domain/user/package-info.java
================
package cesar.school.raycharge.authentication.domain.user;

================
File: domain/authentication-bdd/src/test/resources/cesar/school/raycharge/authentication/domain/user/create_user.feature
================
Feature: Create User

  Scenario: Successfully create a new user
    Given a user with login "testuser", password "password123", and role "DRIVER"
    When I create the user
    Then the user should be saved successfully
    And the user should have a hashed password

  Scenario: Fail to create a user with an existing login
    Given a user with login "existinguser", password "password123", and role "DRIVER"
    And a user already exists with login "existinguser"
    When I create the user
    Then the user creation should fail

================
File: domain/authentication-bdd/src/test/resources/cesar/school/raycharge/authentication/domain/user/login.feature
================
Feature: Login
    Scenario: User login with valid credentials
        Given a user with login "user" and password "password"
        When the user logs in with login "user" and password "password"
        Then the user is logged in

    Scenario: User login with invalid credentials
        Given a user with login "user" and password "password"
        When the user logs in with login "user" and password "wrong"
        Then the user is not logged in

================
File: domain/authentication-bdd/src/test/resources/junit-platform.properties
================
cucumber.glue=cesar.school.raycharge.authentication.domain

================
File: domain/authentication-bdd/target/test-classes/cesar/school/raycharge/authentication/domain/user/create_user.feature
================
Feature: Create User

  Scenario: Successfully create a new user
    Given a user with login "testuser", password "password123", and role "DRIVER"
    When I create the user
    Then the user should be saved successfully
    And the user should have a hashed password

  Scenario: Fail to create a user with an existing login
    Given a user with login "existinguser", password "password123", and role "DRIVER"
    And a user already exists with login "existinguser"
    When I create the user
    Then the user creation should fail

================
File: domain/authentication-bdd/target/test-classes/cesar/school/raycharge/authentication/domain/user/login.feature
================
Feature: Login
    Scenario: User login with valid credentials
        Given a user with login "user" and password "password"
        When the user logs in with login "user" and password "password"
        Then the user is logged in

    Scenario: User login with invalid credentials
        Given a user with login "user" and password "password"
        When the user logs in with login "user" and password "wrong"
        Then the user is not logged in

================
File: domain/authentication-bdd/target/test-classes/junit-platform.properties
================
cucumber.glue=cesar.school.raycharge.authentication.domain

================
File: domain/authentication/pom.xml
================
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>cesar.school.raycharge</groupId>
        <artifactId>raycharge-core</artifactId>
        <version>0.0.1-SNAPSHOT</version>
        <relativePath>../../core/pom.xml</relativePath>
    </parent>

    <artifactId>raycharge-domain-authentication</artifactId>

    <dependencies>
        <dependency>
            <groupId>commons-validator</groupId>
            <artifactId>commons-validator</artifactId>
        </dependency>

        <dependency>
            <groupId>org.jmolecules</groupId>
            <artifactId>jmolecules-events</artifactId>
        </dependency>

        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>raycharge-domain-common</artifactId>
            <version>${project.version}</version>
        </dependency>
    </dependencies>

</project>

================
File: domain/authentication/src/main/java/cesar/school/raycharge/authentication/domain/security/PasswordHasher.java
================
package cesar.school.raycharge.authentication.domain.security;

public interface PasswordHasher {
    String hashPassword(String password);
    boolean verifyPassword(String plainPassword, String hashedPassword);
}

================
File: domain/authentication/src/main/java/cesar/school/raycharge/authentication/domain/user/AuthenticationService.java
================
package cesar.school.raycharge.authentication.domain.user;

import cesar.school.raycharge.authentication.domain.security.PasswordHasher;
import org.jmolecules.ddd.annotation.Service;

import static org.apache.commons.lang3.Validate.notNull;

@Service
public class AuthenticationService {
  private final UserRepository userRepository;
  private final PasswordHasher passwordHasher;

  public AuthenticationService(UserRepository userRepository, PasswordHasher passwordHasher) {
    this.passwordHasher = passwordHasher;
    this.userRepository = userRepository;
  }

  public User createUser(User user) {
    notNull(user, "User cannot be null");

    String hashedPassword = passwordHasher.hashPassword(user.getPassword());
    user.setPassword(hashedPassword);
    if (user.getId() == null) {
      UserId newId = new UserId();
      User insertedUser = new User(newId, user.getLogin(), user.getPassword(), user.getRole());
      return userRepository.save(insertedUser);
    }
    return userRepository.save(user);
  }

  public boolean login(String login, String password) {
    notNull(login, "Login cannot be null");
    notNull(password, "Password cannot be null");

    User user = userRepository.findByLogin(login);
    if (user == null) {
      return false;
    }

    return passwordHasher.verifyPassword(password, user.getPassword());
  }
}

================
File: domain/authentication/src/main/java/cesar/school/raycharge/authentication/domain/user/package-info.java
================
@DomainLayer
package cesar.school.raycharge.authentication.domain.user;

import org.jmolecules.architecture.layered.DomainLayer;

================
File: domain/authentication/src/main/java/cesar/school/raycharge/authentication/domain/user/User.java
================
package cesar.school.raycharge.authentication.domain.user;

import org.jmolecules.ddd.types.AggregateRoot;

public class User implements Cloneable, AggregateRoot<User, UserId> {
  private final UserId id;
  private String login;
  private String password;
  private UserRole role;

  public User(String login, String password, UserRole role) {
    this.id = null;
    this.login = login;
    this.password = password;
    this.role = role;
  }

  public User(UserId id, String login, String password, UserRole role) {
    this.id = id;
    this.login = login;
    this.password = password;
    this.role = role;
  }

  @Override
  public UserId getId() {
    return id;
  }

  @Override
  public User clone() {
    try {
      return (User) super.clone();
    } catch (CloneNotSupportedException e) {
      throw new RuntimeException(e);
    }
  }

  @Override
  public String toString() {
    return login;
  }

  public String getLogin() {
    return login;
  }

  public void setLogin(String login) {
    this.login = login;
  }

  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  public UserRole getRole() {
    return role;
  }

  public void setRole(UserRole role) {
    this.role = role;
  }
}

================
File: domain/authentication/src/main/java/cesar/school/raycharge/authentication/domain/user/UserId.java
================
package cesar.school.raycharge.authentication.domain.user;

import org.jmolecules.ddd.types.Identifier;
import org.jmolecules.ddd.types.ValueObject;

import java.util.UUID;

import static org.apache.commons.lang3.Validate.isTrue;

public class UserId implements ValueObject, Identifier {
  private final String id;

  public UserId(String id) {
    isTrue(!id.isEmpty(), "Id must not be empty");
    this.id = id;
  }

  public UserId() {
    this.id = UUID.randomUUID().toString();
  }

  public String getId() {
    return id;
  }

  @Override
  public boolean equals(Object obj) {
    if (obj instanceof UserId userId) {
      return id.equals(userId.id);
    }
    return false;
  }

  @Override
  public int hashCode() {
    return id.hashCode();
  }

  @Override
  public String toString() {
    return id;
  }
}

================
File: domain/authentication/src/main/java/cesar/school/raycharge/authentication/domain/user/UserRepository.java
================
package cesar.school.raycharge.authentication.domain.user;

public interface UserRepository {
  User save(User user);
  User findByLogin(String login);
}

================
File: domain/authentication/src/main/java/cesar/school/raycharge/authentication/domain/user/UserRole.java
================
package cesar.school.raycharge.authentication.domain.user;

public enum UserRole {
  DRIVER,
  SUPPLIER
}

================
File: domain/common/pom.xml
================
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>cesar.school.raycharge</groupId>
        <artifactId>raycharge-core</artifactId>
        <version>0.0.1-SNAPSHOT</version>
        <relativePath>../../core/pom.xml</relativePath>
    </parent>

    <artifactId>raycharge-domain-common</artifactId>

    <dependencies>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>

        <dependency>
            <groupId>org.jmolecules</groupId>
            <artifactId>jmolecules-ddd</artifactId>
        </dependency>

        <dependency>
            <groupId>org.jmolecules</groupId>
            <artifactId>jmolecules-events</artifactId>
        </dependency>

        <dependency>
            <groupId>org.jmolecules</groupId>
            <artifactId>jmolecules-layered-architecture</artifactId>
        </dependency>
    </dependencies>

</project>

================
File: domain/pom.xml
================
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>cesar.school.raycharge</groupId>
    <artifactId>raycharge-domain</artifactId>
    <version>0.0.1-SNAPSHOT</version>

    <packaging>pom</packaging>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <modules>
        <module>common</module>
        <module>authentication</module>
        <module>authentication-bdd</module>
    </modules>
</project>

================
File: infra/persistence/jpa/pom.xml
================
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
         https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>cesar.school.raycharge</groupId>
        <artifactId>raycharge-core</artifactId>
        <version>0.0.1-SNAPSHOT</version>
        <relativePath>../../../core/pom.xml</relativePath>
    </parent>

    <artifactId>raycharge-infra-persistence-jpa</artifactId>

    <dependencies>
        <dependency>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-core</artifactId>
        </dependency>

        <dependency>
            <groupId>org.modelmapper</groupId>
            <artifactId>modelmapper</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>raycharge-domain-authentication</artifactId>
            <version>${project.version}</version>
        </dependency>
    </dependencies>


</project>

================
File: infra/persistence/jpa/src/main/java/cesar.school.raycharge.infra.persistence.jpa.JpaMapper.java
================
import cesar.school.raycharge.authentication.domain.user.User;
import cesar.school.raycharge.authentication.domain.user.UserId;
import cesar.school.raycharge.authentication.domain.user.UserRole;
import org.modelmapper.AbstractConverter;
import org.modelmapper.ModelMapper;
import org.modelmapper.config.Configuration;
import org.springframework.stereotype.Component;

@Component
public class cesar.school.raycharge.infra.persistence.jpa.JpaMapper extends ModelMapper {
    cesar.school.raycharge.infra.persistence.jpa.JpaMapper() {
        var config = getConfiguration();
        config.setFieldMatchingEnabled(true);
        config.setFieldAccessLevel(Configuration.AccessLevel.PRIVATE);

        addConverter(new AbstractConverter<cesar.school.raycharge.infra.persistence.jpa.UserJpa, User>() {
            @Override
            protected User convert(cesar.school.raycharge.infra.persistence.jpa.UserJpa source) {
                var id = map(source.id, UserId.class);
                var userRole = map(source.role, UserRole.class);
                return new User(id, source.login, source.password, userRole);
            }
        });

    }
}

================
File: infra/persistence/jpa/src/main/java/cesar.school.raycharge.infra.persistence.jpa.UserJpa.java
================
import cesar.school.raycharge.authentication.domain.user.User;
import cesar.school.raycharge.authentication.domain.user.UserRepository;
import cesar.school.raycharge.authentication.domain.user.UserRole;
import jakarta.persistence.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Repository;
import org.springframework.stereotype.Service;


import java.util.Optional;

@Entity
@Table(name = "users")
public class cesar.school.raycharge.infra.persistence.jpa.UserJpa {
    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    String id;

    @Column(unique = true)
    String login;

    String password;

    @Enumerated(EnumType.STRING)
    UserRole role;
}

interface cesar.school.raycharge.infra.persistence.jpa.UserJpaRepository extends JpaRepository<cesar.school.raycharge.infra.persistence.jpa.UserJpa, String> {
    Optional<cesar.school.raycharge.infra.persistence.jpa.UserJpa> findUserJpaByLogin(String login);
}

================
File: infra/persistence/jpa/src/main/java/cesar.school.raycharge.infra.persistence.jpa.UserRepositoryImpl.java
================
import cesar.school.raycharge.authentication.domain.user.User;
import cesar.school.raycharge.authentication.domain.user.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

@Repository
public class cesar.school.raycharge.infra.persistence.jpa.UserRepositoryImpl implements UserRepository {
    @Autowired
    cesar.school.raycharge.infra.persistence.jpa.UserJpaRepository repository;

    @Autowired
    cesar.school.raycharge.infra.persistence.jpa.JpaMapper mapper;

    @Override
    public User save(User user) {
        var userJpa = mapper.map(user, cesar.school.raycharge.infra.persistence.jpa.UserJpa.class);
        repository.save(userJpa);
        return user;
    }

    @Override
    public User findByLogin(String login) {
        var userJpa = repository.findUserJpaByLogin(login);
        return userJpa.map(jpa -> mapper.map(jpa, User.class)).orElse(null);
    }
}

================
File: infra/persistence/jpa/src/main/resources/db/migration/V1__users.sql
================
CREATE TABLE users
(
    id       VARCHAR(255) NOT NULL,
    login    VARCHAR(255),
    password VARCHAR(255),
    role     VARCHAR(255),
    CONSTRAINT pk_users PRIMARY KEY (id)
);

ALTER TABLE users
    ADD CONSTRAINT uc_users_login UNIQUE (login);

================
File: infra/persistence/jpa/target/classes/db/migration/V1__users.sql
================
CREATE TABLE users
(
    id       VARCHAR(255) NOT NULL,
    login    VARCHAR(255),
    password VARCHAR(255),
    role     VARCHAR(255),
    CONSTRAINT pk_users PRIMARY KEY (id)
);

ALTER TABLE users
    ADD CONSTRAINT uc_users_login UNIQUE (login);

================
File: infra/persistence/memory/pom.xml
================
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>cesar.school.raycharge</groupId>
        <artifactId>raycharge-core</artifactId>
        <version>0.0.1-SNAPSHOT</version>
        <relativePath>../../../core/pom.xml</relativePath>
    </parent>

    <artifactId>raycharge-infra-persistence-memory</artifactId>

    <dependencies>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>raycharge-domain-authentication</artifactId>
            <version>${project.version}</version>
        </dependency>
    </dependencies>

</project>

================
File: infra/persistence/memory/src/main/java/cesar/school/raycharge/infra/persistence/memory/package-info.java
================
@InfrastructureLayer
package cesar.school.raycharge.infra.persistence.memory;

import org.jmolecules.architecture.layered.InfrastructureLayer;

================
File: infra/persistence/memory/src/main/java/cesar/school/raycharge/infra/persistence/memory/Repository.java
================
package cesar.school.raycharge.infra.persistence.memory;

import cesar.school.raycharge.authentication.domain.user.User;
import cesar.school.raycharge.authentication.domain.user.UserId;
import cesar.school.raycharge.authentication.domain.user.UserRepository;

import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

public class Repository implements UserRepository {
  /*-----------------------------------------------------------------------*/
  /* UserRepository                                                        */
  private Map<UserId, User> users = new HashMap<>();

  @Override
  public User save(User user) {
    Objects.requireNonNull(user, "user must not be null");
    if (users.containsKey(user.getId())) {
      return null;
    }
    for (User u : users.values()) {
      if (u.getLogin().equals(user.getLogin())) {
        return null;
      }
    }
    users.put(user.getId(), user);
    return user;
  }

  @Override
  public User findByLogin(String login) {
    Objects.requireNonNull(login, "login must not be null");
    for (User u : users.values()) {
      if (u.getLogin().equals(login)) {
        return u;
      }
    }
    return null;
  }

  /*-----------------------------------------------------------------------*/
}

================
File: infra/persistence/pom.xml
================
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>cesar.school.raycharge</groupId>
    <artifactId>raycharge-infra-persistence</artifactId>
    <version>0.0.1-SNAPSHOT</version>

    <packaging>pom</packaging>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <modules>
        <module>memory</module>
        <module>jpa</module>
    </modules>

</project>

================
File: infra/pom.xml
================
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>cesar.school.raycharge</groupId>
    <artifactId>raycharge-infra</artifactId>
    <version>0.0.1-SNAPSHOT</version>

    <packaging>pom</packaging>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <modules>
        <module>persistence</module>
        <module>security</module>
    </modules>

</project>

================
File: infra/security/pom.xml
================
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>cesar.school.raycharge</groupId>
        <artifactId>raycharge-core</artifactId>
        <version>0.0.1-SNAPSHOT</version>
        <relativePath>../../core/pom.xml</relativePath>
    </parent>

    <artifactId>raycharge-infra-security</artifactId>


    <dependencies>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>raycharge-domain-authentication</artifactId>
            <version>${project.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>
    </dependencies>

</project>

================
File: infra/security/src/main/java/cesar/school/raycharge/infra/security/PasswordHasherImpl.java
================
package cesar.school.raycharge.infra.security;

import cesar.school.raycharge.authentication.domain.security.PasswordHasher;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Component;

import java.security.SecureRandom;

@Component
public class PasswordHasherImpl implements PasswordHasher {

    private final BCryptPasswordEncoder passwordEncoder;

    public PasswordHasherImpl() {
        this.passwordEncoder = new BCryptPasswordEncoder(10, new SecureRandom());
    }

    @Override
    public String hashPassword(String password) {
        return passwordEncoder.encode(password);
    }

    @Override
    public boolean verifyPassword(String plainPassword, String hashedPassword) {
        return passwordEncoder.matches(plainPassword, hashedPassword);
    }
}

================
File: pom.xml
================
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>cesar.school.raycharge</groupId>
    <artifactId>raycharge-modules</artifactId>
    <version>0.0.1-SNAPSHOT</version>

    <packaging>pom</packaging>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <modules>
        <module>core</module>
        <module>domain</module>
        <module>infra</module>
        <module>presentation</module>
        <module>application</module>
        <module>docker</module>
    </modules>
</project>

================
File: presentation/backend/pom.xml
================
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
         https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>cesar.school.raycharge</groupId>
        <artifactId>raycharge-core</artifactId>
        <version>0.0.1-SNAPSHOT</version>
        <relativePath>../../core/pom.xml</relativePath>
    </parent>

    <artifactId>raycharge-presentation-backend</artifactId>

    <dependencies>
        <dependency>
            <groupId>org.modelmapper</groupId>
            <artifactId>modelmapper</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>raycharge-application</artifactId>
            <version>${project.version}</version>
        </dependency>
    </dependencies>
</project>

================
File: presentation/backend/src/main/java/cesar/school/raycharge/presentation/authentication/AuthenticationController.java
================
package cesar.school.raycharge.presentation.authentication;

import cesar.school.raycharge.authentication.domain.user.AuthenticationService;
import cesar.school.raycharge.authentication.domain.user.User;
import cesar.school.raycharge.presentation.BackendMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/authentication")
public class AuthenticationController {
    private @Autowired AuthenticationService authenticationService;
    private @Autowired BackendMapper mapper;

    @RequestMapping(method = RequestMethod.POST, path = "/sign-up")
    public ResponseEntity<Void> signup(@RequestBody AuthenticationForm.UserDto dto) {
        var newUser = mapper.map(dto, User.class);
        var createdUser = authenticationService.createUser(newUser);
        if (createdUser == null) {
            return ResponseEntity.badRequest().build();
        } else {
            return ResponseEntity.status(HttpStatus.CREATED).build();
        }
    }
}

================
File: presentation/backend/src/main/java/cesar/school/raycharge/presentation/authentication/AuthenticationForm.java
================
package cesar.school.raycharge.presentation.authentication;

import cesar.school.raycharge.authentication.domain.user.UserRole;

public class AuthenticationForm {
    public UserDto user;

    public AuthenticationForm(UserDto user) {
        this.user = user;
    }

    public static class UserDto {
        public String login;
        public String password;
        public UserRole role;
    }
}

================
File: presentation/backend/src/main/java/cesar/school/raycharge/presentation/BackendMapper.java
================
package cesar.school.raycharge.presentation;

import cesar.school.raycharge.authentication.domain.user.User;
import cesar.school.raycharge.presentation.authentication.AuthenticationForm;
import org.modelmapper.AbstractConverter;
import org.modelmapper.ModelMapper;
import org.springframework.stereotype.Component;

@Component
public class BackendMapper extends ModelMapper {
    BackendMapper() {
        
        addConverter(new AbstractConverter<AuthenticationForm.UserDto, User>() {
            @Override
            protected User convert(AuthenticationForm.UserDto source) {
                return new User(
                        source.login,
                        source.password,
                        source.role
                );
            }
        });
    }

    @Override
    public <D> D map(Object source, Class<D> destinationType) {
        return source != null ? super.map(source, destinationType) : null;
    }
}

================
File: presentation/pom.xml
================
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
         https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>cesar.school.raycharge</groupId>
    <artifactId>raycharge-presentation</artifactId>
    <version>0.0.1-SNAPSHOT</version>

    <packaging>pom</packaging>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <modules>
        <module>backend</module>
    </modules>
</project>
