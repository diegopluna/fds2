
		}

	}

	Aggregate Veiculo

	{

		Entity Veiculo

        {

			aggregateRoot

            - IdMotorista motorista

            String nomeVeiculo

			- IdVeiculo idVeiculo

            String placaVeiculo

            - List <IdAgendamento> historicoDeUso // idAgendamento

			// adicionar Marca e Modelo

        }

        Service AlteracoesVeiculo

		{

			int adicionarVeiculo(String placaVeiculo, String nomeVeiculo);

			int deletarVeiculo(@Veiculo veiculo);

			int alterarNomeVeiculo(String novoNome);

			int alterarPlacaVeiculo(String novaPlaca);

		}

		ValueObject IdVeiculo

		{

			int idVeiculo key

		}

    }

}



BoundedContext RealizacaoDeRecargaContext implements RealizacaoDeRecargaDomain

{

	type = FEATURE

	domainVisionStatement = "O contexto de Realizar Recarga é responsável por mostrar para os Motoristas as Estações Próximas, permitir que realizem Agendamentos e garantir que a Recarga seja feita."

	responsibilities = "Agenda"



	Aggregate  Agendamento

    {

        Entity Agendamento

        {

            aggregateRoot



            - IdAgendamento idAgendamento

            int codigoLiberacaoCarregador

            - HorarioDisponivel horarioAgendamento



            - StatusAgendamento statusAgendamento

			int valorTotalRecarga



            - IdEstacao estacaoDeRecarga

            - IdMotorista motorista // vai puxar o motorista pela autenticacao

            - IdVeiculo veiculo

			- List<Avaliacao> avaliacoes

        }

        ValueObject IdAgendamento

        {

            int idAgendamento key

        }

		Service ServicoAgendamento

		{

			int realizarAgendamento(@HorarioDisponivel horarioAgendamento, @Veiculo veiculo, @EstacaoDeRecarga estacao); // retornar o id do agendamento

			int cancelarAgendamento(@IdAgendamento idAgendamento); // retornar o id do agendamento e define o valorTotalRecarga

			int getCodigoLiberacao(@IdAgendamento idAgendamento);

			int concluirAgendamento(@IdAgendamento idAgendamento); // define o valorTotalRecarga

		}

		Service ServicoAvaliacao

		{

			int avaliarAgendamento(@IdAgendamento idAgendamento, @Avaliacoes avaliacao, String descricaoExperiencia);

		}

		Service ConsultaEstacoesProximas

		{

			int getEstacoesProximas(@Endereco enderecoAtualMotorista, int raioDeBusca);

			int setNovoRaio(int novoRaio);

		}

		enum StatusAgendamento

		{

			ATIVO, CANCELADO, CONCLUIDO

		}

		ValueObject Avaliacao

		{

			int idAvaliacao key

			- Avaliacoes avaliacaoDada

			String descricaoExperiencia nullable

		}

		enum Avaliacoes

		{

			UM, DOIS, TRES, QUATRO, CINCO

		}

	}

}



BoundedContext AutenticacaoEAutorizacaoContext implements AutenticacaoEAutorizacaoDomain

{

	type = APPLICATION

	domainVisionStatement = "O contexto de gerenciamento de autenticacao é uma aplicação que valida o usuário que acessa o sistema."



	Aggregate Autenticacao

    {

        Entity Usuario

        {

            aggregateRoot



            String login

            String senha

            - TipoUsuario tipoUsuario

			- IdUsuario id

        }

		ValueObject IdUsuario

		{

			int idUsuario key

		}

    	Service NovosUsuarios

    	{

    		// Nao criamos a funcao de deletar contas aqui pois os subdominios especificos realizam isso

    		int criarConta(String login, String senha, @TipoUsuario tipoUsuario, @IdUsuario cpfOuCnpjUsuario);

    	}

		enum TipoUsuario

		{

			MOTORISTA, FORNECEDOR

		}

    }

}



BoundedContext NotificacoesContext implements NotificacoesDomain

{

    Aggregate Notificacao

    {

        Entity Notificacao

        {

            - List <IdUsuario> destinatarios

            - IdUsuario origem nullable

			String descricaoEvento

            String mensagem

        }

    }

}



BoundedContext RelatoriosSobreAsEstacoesDeRecargaContext implements RelatoriosSobreAsEstacoesDeRecargaDomain

{

	Aggregate RelatorioDesempenho

	{

		Entity Desempenho

		{

			aggregateRoot

			- IdEstacao estacaoDeRecarga

			- PeriodoDeAnalise periodoDeAnalise

			- Relatorio relatorio

		}

		ValueObject PeriodoDeAnalise

		{

			DateTime inicioDaAnalise

			DateTime fimDaAnalise

		}

		ValueObject Relatorio

		{

			int idRelatorio

			String relatorio

		}

		Service ServicoRelatorio

		{

			int alterarPeriodoDeAnalise(@PeriodoDeAnalise novoPeriodo);

			@Relatorio gerarRelatorio(@EstacaoDeRecarga estacao, @PeriodoDeAnalise periodo);

		}

	}

}



/* Descrição do Domínio e Subdomínios */

Domain RayChargeDomain

{

	// Subdomínio de Cadastro e Controle dos Fornecedores (genérico)

    Subdomain CadastroEControleDeFornecedoresDomain

    {

        type = GENERIC_SUBDOMAIN

		domainVisionStatement = "Subdomínio responsável por armazenar tudo referente ao Fornecedor e Estações de Recarga."

    }



	// Subdomínio de Cadastro e Controle dos Motoristas (genérico)

    Subdomain CadastroEControleDeMotoristasDomain

    {

        type = GENERIC_SUBDOMAIN

		domainVisionStatement = "Subdomínio responsável por armazenar tudo referente ao Motorista e Veículos da Recarga."

    }



	// Subdomínio de Consulta e Agendamento de Recarga (principal)

    Subdomain RealizacaoDeRecargaDomain

    {

        type = CORE_DOMAIN

		domainVisionStatement = "Subdomínio responsável por mostrar para os Motoristas as Estações Próximas, permitir que realizem Agendamentos e garantir a realização da Recarga."

    }



	// Subdomínio de Autenticação e Autorização (suporte)

    Subdomain AutenticacaoEAutorizacaoDomain

    {

        type = SUPPORTING_DOMAIN

		domainVisionStatement = "Subdomínio responsável pela autenticação e autorização de Motoristas e Fornecedores."

    }



	// Subdomínio de Notificações (suporte)

    Subdomain NotificacoesDomain

    {

        type = SUPPORTING_DOMAIN

		domainVisionStatement = "Subdomínio responsável por enviar alertas e atualizações aos Motoristas e Fornecedores em resposta a eventos específicos que ocorrem no sistema."

    }



	// verificar necessidade

	// Subdomínio de Monitoramento de Desempenho das Estações de Recarga (suporte)

    Subdomain RelatoriosSobreAsEstacoesDeRecargaDomain

    {

        type = SUPPORTING_DOMAIN

		domainVisionStatement = "Subdomínio responsável por informar ao Fornecedor sobre o desempenho das suas Estações de Recarga."

    }

}