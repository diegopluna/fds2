/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignUpImport } from './routes/sign-up'
import { Route as MapaImport } from './routes/mapa'
import { Route as LoginImport } from './routes/login'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as IndexImport } from './routes/index'
import { Route as DashboardIndexImport } from './routes/dashboard.index'
import { Route as DetalhesEstacaoStationIdImport } from './routes/detalhesEstacao.$stationId'
import { Route as DashboardStationDetailsImport } from './routes/dashboard.station-details'
import { Route as DashboardSchedulesImport } from './routes/dashboard.schedules'
import { Route as DashboardMapaImport } from './routes/dashboard.mapa'

// Create/Update Routes

const SignUpRoute = SignUpImport.update({
  path: '/sign-up',
  getParentRoute: () => rootRoute,
} as any)

const MapaRoute = MapaImport.update({
  path: '/mapa',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRoute = DashboardImport.update({
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const DashboardIndexRoute = DashboardIndexImport.update({
  path: '/',
  getParentRoute: () => DashboardRoute,
} as any)

const DetalhesEstacaoStationIdRoute = DetalhesEstacaoStationIdImport.update({
  path: '/detalhesEstacao/$stationId',
  getParentRoute: () => rootRoute,
} as any)

const DashboardStationDetailsRoute = DashboardStationDetailsImport.update({
  path: '/station-details',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardSchedulesRoute = DashboardSchedulesImport.update({
  path: '/schedules',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardMapaRoute = DashboardMapaImport.update({
  path: '/mapa',
  getParentRoute: () => DashboardRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/mapa': {
      id: '/mapa'
      path: '/mapa'
      fullPath: '/mapa'
      preLoaderRoute: typeof MapaImport
      parentRoute: typeof rootRoute
    }
    '/sign-up': {
      id: '/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof SignUpImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/mapa': {
      id: '/dashboard/mapa'
      path: '/mapa'
      fullPath: '/dashboard/mapa'
      preLoaderRoute: typeof DashboardMapaImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/schedules': {
      id: '/dashboard/schedules'
      path: '/schedules'
      fullPath: '/dashboard/schedules'
      preLoaderRoute: typeof DashboardSchedulesImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/station-details': {
      id: '/dashboard/station-details'
      path: '/station-details'
      fullPath: '/dashboard/station-details'
      preLoaderRoute: typeof DashboardStationDetailsImport
      parentRoute: typeof DashboardImport
    }
    '/detalhesEstacao/$stationId': {
      id: '/detalhesEstacao/$stationId'
      path: '/detalhesEstacao/$stationId'
      fullPath: '/detalhesEstacao/$stationId'
      preLoaderRoute: typeof DetalhesEstacaoStationIdImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexImport
      parentRoute: typeof DashboardImport
    }
  }
}

// Create and export the route tree

interface DashboardRouteChildren {
  DashboardMapaRoute: typeof DashboardMapaRoute
  DashboardSchedulesRoute: typeof DashboardSchedulesRoute
  DashboardStationDetailsRoute: typeof DashboardStationDetailsRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardMapaRoute: DashboardMapaRoute,
  DashboardSchedulesRoute: DashboardSchedulesRoute,
  DashboardStationDetailsRoute: DashboardStationDetailsRoute,
  DashboardIndexRoute: DashboardIndexRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/login': typeof LoginRoute
  '/mapa': typeof MapaRoute
  '/sign-up': typeof SignUpRoute
  '/dashboard/mapa': typeof DashboardMapaRoute
  '/dashboard/schedules': typeof DashboardSchedulesRoute
  '/dashboard/station-details': typeof DashboardStationDetailsRoute
  '/detalhesEstacao/$stationId': typeof DetalhesEstacaoStationIdRoute
  '/dashboard/': typeof DashboardIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/mapa': typeof MapaRoute
  '/sign-up': typeof SignUpRoute
  '/dashboard/mapa': typeof DashboardMapaRoute
  '/dashboard/schedules': typeof DashboardSchedulesRoute
  '/dashboard/station-details': typeof DashboardStationDetailsRoute
  '/detalhesEstacao/$stationId': typeof DetalhesEstacaoStationIdRoute
  '/dashboard': typeof DashboardIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/login': typeof LoginRoute
  '/mapa': typeof MapaRoute
  '/sign-up': typeof SignUpRoute
  '/dashboard/mapa': typeof DashboardMapaRoute
  '/dashboard/schedules': typeof DashboardSchedulesRoute
  '/dashboard/station-details': typeof DashboardStationDetailsRoute
  '/detalhesEstacao/$stationId': typeof DetalhesEstacaoStationIdRoute
  '/dashboard/': typeof DashboardIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/login'
    | '/mapa'
    | '/sign-up'
    | '/dashboard/mapa'
    | '/dashboard/schedules'
    | '/dashboard/station-details'
    | '/detalhesEstacao/$stationId'
    | '/dashboard/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/mapa'
    | '/sign-up'
    | '/dashboard/mapa'
    | '/dashboard/schedules'
    | '/dashboard/station-details'
    | '/detalhesEstacao/$stationId'
    | '/dashboard'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/login'
    | '/mapa'
    | '/sign-up'
    | '/dashboard/mapa'
    | '/dashboard/schedules'
    | '/dashboard/station-details'
    | '/detalhesEstacao/$stationId'
    | '/dashboard/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRouteWithChildren
  LoginRoute: typeof LoginRoute
  MapaRoute: typeof MapaRoute
  SignUpRoute: typeof SignUpRoute
  DetalhesEstacaoStationIdRoute: typeof DetalhesEstacaoStationIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRouteWithChildren,
  LoginRoute: LoginRoute,
  MapaRoute: MapaRoute,
  SignUpRoute: SignUpRoute,
  DetalhesEstacaoStationIdRoute: DetalhesEstacaoStationIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/dashboard",
        "/login",
        "/mapa",
        "/sign-up",
        "/detalhesEstacao/$stationId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard.tsx",
      "children": [
        "/dashboard/mapa",
        "/dashboard/schedules",
        "/dashboard/station-details",
        "/dashboard/"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/mapa": {
      "filePath": "mapa.tsx"
    },
    "/sign-up": {
      "filePath": "sign-up.tsx"
    },
    "/dashboard/mapa": {
      "filePath": "dashboard.mapa.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/schedules": {
      "filePath": "dashboard.schedules.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/station-details": {
      "filePath": "dashboard.station-details.tsx",
      "parent": "/dashboard"
    },
    "/detalhesEstacao/$stationId": {
      "filePath": "detalhesEstacao.$stationId.tsx"
    },
    "/dashboard/": {
      "filePath": "dashboard.index.tsx",
      "parent": "/dashboard"
    }
  }
}
ROUTE_MANIFEST_END */
